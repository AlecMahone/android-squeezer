buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.6.+'
    }
}
apply plugin: 'android'

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')

    // Android support libraries
    // Note: these libraries require the "Google Repository" and "Android
    //       Support Repository" to be installed via the SDK manager.
    compile group: 'com.android.support', name: 'support-v4', version: '19.0.+'

    compile group: 'ch.acra', name: 'acra', version: '4.5.0'
    compile group: 'com.google.guava', name: 'guava', version: '15.0'
    // findbugs is required for Proguard to work with Guava.
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '2.0.2'
}

task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '1.8'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 19
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
    }

    buildTypes {
        release {
            runProguard true
            // You could use 'proguardFile "proguard.cfg"' here and get the
            // same effect, but this ensures that any changes to
            // proguard-android-optimize.txt are automatically included.
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile "proguard-acra.cfg"
            proguardFile "proguard-guava.cfg"
            proguardFile "proguard-squeezer.cfg"
        }
    }

    signingConfigs {
        if(project.hasProperty("Squeezer.properties")
                && new File(project.property("Squeezer.properties")).exists()) {
            Properties props = new Properties()
            props.load(new FileInputStream(file(project.property("Squeezer.properties"))))

            release {
                storeFile file("keystore")
                storePassword props['key.store.password']
                keyAlias "squeezer"
                keyPassword props['key.alias.password']
            }
        } else {
            release {
                storeFile file("keystore")
                storePassword "fakeStorePassword"
                keyAlias "squeezer"
                keyPassword "fakeKeyPassword"
            }
        }
    }

    productFlavors {
        beta {
            versionCode 14
            versionName "1.0-beta-1"
            signingConfig android.signingConfigs.release
        }

        live {
            versionCode 13
            versionName "0.9.1"
            signingConfig android.signingConfigs.release
        }
    }
}
